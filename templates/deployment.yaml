{{ if .Values.rbac.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}
rules:
- apiGroups: ["", "extensions", "apps", "batch", "policy", "rbac.authorization.k8s.io", "networking.k8s.io"]
  resources: ["componentstatuses", "persistentvolumeclaims", "replicasets", "deployments", "events", "endpoints", "pods", "pods/log", "pods/exec", "namespaces", "services", "replicationcontrollers", "secrets", "resourcequotas", "limitranges", "networkpolicies"]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["ndslabs-config"]
  verbs: ["get", "update"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
- nonResourceURLs: ["*"]
  verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}
  apiGroup: rbac.authorization.k8s.io
---
{{ end }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    component: {{ .Release.Name }}
spec:
  selector:
    component: {{ .Release.Name }}
  ports:
    - port: 80
      name: webui
      protocol: TCP
      targetPort: 3000
    - port: 30001
      name: api
      protocol: TCP
    - name: smtp
      port: 25
      protocol: TCP
{{- if .Values.workbench.etcd_storage.persistent.type | default false }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-etcd
spec:
  storageClassName: ""
  capacity:
    storage: {{ .Values.workbench.etcd_storage.size | quote }}
  accessModes:
    - {{ .Values.workbench.etcd_storage.access_mode | quote }}
  {{- if eq .Values.workbench.etcd_storage.persistent.type "aws" | default nil }}
  awsElasticBlockStore:
    volumeID: {{ .Values.workbench.etcd_storage.persistent.volume_id | quote }}
  {{- else if eq .Values.workbench.etcd_storage.persistent.type "gce" | default nil }}
  gcePersistentDisk:
    pdName: {{ .Values.workbench.etcd_storage.persistent.volume_id | quote }}
  {{- end }}
    fsType: ext4
  claimRef:
    namespace: {{ .Release.Namespace }}
    name: {{ .Release.Name }}-etcd
{{- end }}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-etcd
  namespace: {{ .Release.Namespace }}
  annotations:
  {{- if .Values.workbench.etcd_storage.storage_class }}
    volume.beta.kubernetes.io/storage-class: {{ .Values.workbench.etcd_storage.storage_class | quote }}
  {{- end }}
spec:
  {{- if .Values.workbench.etcd_storage.persistent.type | default false }}
  storageClassName: ""
  volumeName: {{ .Release.Name }}-etcd
  {{- end }}
  accessModes:
    - {{ .Values.workbench.etcd_storage.access_mode | quote }}
  resources:
    requests:
      storage: {{ .Values.workbench.etcd_storage.size | quote }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    configHash: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
spec:
  strategy:
    type: "{{ .Values.workbench.strategyType | default "RollingUpdate" }}"
  replicas: 1
  selector:
    matchLabels:
      component: {{ .Release.Name }}
  template:
    metadata:
      labels:
        component: {{ .Release.Name }}
      annotations:
        configHash: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
{{ if .Values.rbac.enabled }}
      serviceAccountName: {{ .Release.Name }}
{{ end }}
      volumes:
       - persistentVolumeClaim:
            claimName: {{ .Release.Name }}-etcd
         name: varetcd
{{ if .Values.workbench.dev.enabled | default false }}
       - hostPath:
            path: "{{ .Values.workbench.dev.uisrc }}"
         name: uisrc
{{ end }}
      containers:
      - name: webui
        image: {{ required "Must specify an image for ndslabs-webui" .Values.workbench.images.webui }}
        imagePullPolicy: Always
{{ if .Values.workbench.dev.enabled | default false }}
        volumeMounts: 
        - name: uisrc
          mountPath: "/home"
{{ end }}
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
          - name: CONFIG_HASH
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['configHash']
          - name: NDSLABS_APISERVER_SERVICE_PORT
            value: "30001"
          - name: DOMAIN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.domain
          - name: COOKIEDOMAIN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.cookie_domain
          - name: SUBDOMAIN_PREFIX
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.subdomain_prefix
          - name: APISERVER_SECURE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.tls.enable
          - name: SIGNIN_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.signin_url
          - name: ANALYTICS_ACCOUNT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.analytics_tracking_id
          - name: SUPPORT_EMAIL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.support_email
          - name: APISERVER_HOST
{{ if .Values.workbench.subdomain_prefix }}
            value: "{{ .Values.workbench.subdomain_prefix }}.$(DOMAIN)"
{{ else }}
            value: "$(DOMAIN)"
{{ end }}
          - name: WORKBENCH_NAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.name
          - name: WORKBENCH_LANDING_HTML
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.landing_html
          - name: WORKBENCH_BRAND_LOGO_PATH
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.brand_logo_path
          - name: WORKBENCH_FAVICON_PATH
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.favicon_path
          - name: WORKBENCH_LEARNMORE_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.learn_more_url
          - name: WORKBENCH_HELP_LINKS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.help_links
          - name: APISERVER_PATH
            value: "/api"
          - name: SHOW_CONFIG
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_config
          - name: SHOW_LOGS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_logs
          - name: SHOW_CONSOLE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_console
          - name: SHOW_REMOVE_SERVICE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_remove_service
          - name: SHOW_EDIT_SERVICE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_edit_service
          - name: SHOW_SERVICE_HELP_ICON
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_service_help_icon
          - name: SHOW_CREATE_SPEC
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_create_spec
          - name: SHOW_IMPORT_SPEC
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_import_spec
          - name: SHOW_FILE_MANAGER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.advanced_features.show_file_manager

        readinessProbe:
          httpGet:
            path: /asset/png/favicon-2-32x32.png
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 120

      - name: apiserver
        image: {{ required "Must specify an image for ndslabs-apiserver" .Values.workbench.images.apiserver }}
        imagePullPolicy: Always
        securityContext:
          privileged: true
        ports:
        - containerPort: 30001
          protocol: TCP
        - containerPort: 30002
          protocol: TCP
        env:
{{ if .Values.workbench.shared_storage.enabled }}
          - name: SHARED_VOLUME_PATH
            valueFrom:
              configMapKeyRef:
                key: workbench.shared_storage.volume_path
                name: workbench
          - name: SHARED_VOLUME_NAME
            valueFrom:
              configMapKeyRef:
                key: workbench.shared_storage.volume_name
                name: workbench
          - name: SHARED_VOLUME_READ_ONLY
            valueFrom:
              configMapKeyRef:
                key: workbench.shared_storage.read_only
                name: workbench
{{ end }}
          - name: WORKBENCH_NAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.name
          - name: TLS_ISSUER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.ingress.tls.issuer
          - name: TLS_CLUSTER_ISSUER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.ingress.tls.cluster_issuer
          - name: SUPPORT_EMAIL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.support_email
          - name: REQUIRE_APPROVAL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.require_account_approval
          - name: DOMAIN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.domain
          - name: SPEC_GIT_REPO
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: git.spec_repo
          - name: SPEC_GIT_BRANCH
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: git.spec_branch
          - name: SIGNIN_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.signin_url
          - name: AUTH_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.auth_url
          - name: NODE_SELECTOR_NAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.node_selector_name
          - name: NODE_SELECTOR_VALUE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.node_selector_value
          - name: CORS_ORIGIN_ADDR
{{ if .Values.workbench.subdomain_prefix }}
            value: "https://{{ .Values.workbench.subdomain_prefix }}.$(DOMAIN)"
{{ else }}
            value: "https://$(DOMAIN)"
{{ end }}
          - name: ETCD_ADDR
            value: "localhost:4001"
          - name: KUBERNETES_ADDR
            value: "https://$(KUBERNETES_SERVICE_HOST):$(KUBERNETES_SERVICE_PORT_HTTPS)"
          - name: INGRESS
            value: "LoadBalancer"
          - name: TIMEOUT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.timeout
          - name: INACTIVITY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.inactivity_timeout
          - name: TOKEN_PATH
            value: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          - name: SMTP_HOST
            value: "localhost"
          - name: SMTP_TLS
            value: "false"
          - name: HOME_PVC_SUFFIX
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.home_storage.home_pvc_suffix
          - name: PVC_STORAGE_CLASS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: workbench.home_storage.pvc_storage_class
      - name: etcd
        image: {{ required "Must specify an image for ndslabs-etcd" .Values.workbench.images.etcd }}
        command:
        - /usr/local/bin/etcd
        - --listen-client-urls=http://0.0.0.0:4001
        - --advertise-client-urls=http://127.0.0.1:4001
        - --data-dir=/var/etcd/data
        ports:
        - containerPort: 4001
          name: server
          protocol: TCP
        volumeMounts: 
        - name: varetcd
          mountPath: /var/etcd
      - name: smtp
        image: {{ required "Must specify an image for ndslabs-smtp" .Values.workbench.images.smtp }}
        ports:
        - containerPort: 25
          name: server
          protocol: TCP
        env:
          - name: MAILNAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.host
          - name: PORT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.port
          - name: GMAIL_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.gmail_user
          - name: GMAIL_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.gmail_pass
          - name: SES_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.aws_ses_user
          - name: SES_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.aws_ses_password
          - name: SMARTHOST_ADDRESS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.smarthost_address
          - name: SMARTHOST_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.smarthost_port
          - name: SMARTHOST_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.smarthost_user
          - name: SMARTHOST_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: smtp.smarthost_password
