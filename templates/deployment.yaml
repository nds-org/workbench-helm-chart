apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}
#  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: ["", "extensions", "apps", "batch", "policy", "rbac.authorization.k8s.io", "networking.k8s.io"]
  resources: ["componentstatuses", "persistentvolumeclaims", "replicasets", "deployments", "events", "endpoints", "pods", "pods/log", "pods/exec", "namespaces", "services", "replicationcontrollers", "secrets", "resourcequotas", "limitranges", "networkpolicies", "*"]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["ndslabs-config"]
  verbs: ["get", "update"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
#- nonResourceURLs: ["*"]
#  verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}
#  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
    component: {{ .Release.Name }}
spec:
  selector:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
  ports:
    - port: 80
      name: webui
      protocol: TCP
    - port: 5000
      name: api
      protocol: TCP
---
apiVersion: apps/v1
kind: {{ .Values.controller.kind | default "Deployment" }}
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: 1
  strategy:
    type: {{ .Values.controller.strategy_type | default "RollingUpdate" }}
  selector:
    matchLabels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 6 }}
{{- end }}
  template:
    metadata:
      labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 8 }}
{{- end }}
      annotations:
        configHash: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Release.Name }}
{{- with .Values.controller.hostAliases }}
      hostAliases:
{{ toYaml . | indent 8 }}
{{- end }}
      containers:
      - name: webui
        image: {{ required "Must specify an image for controller.images.webui" .Values.controller.images.webui }}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: webui
        volumeMounts:
        - name: frontend-config
          mountPath: /usr/share/nginx/html/frontend.json
          subPath: frontend.json

      - name: apiserver
        image: {{ required "Must specify an image for controller.images.apiserver" .Values.controller.images.apiserver }}
        imagePullPolicy: Always
        volumeMounts:
        - name: frontend-config
          mountPath: /app/env/frontend.json
          subPath: frontend.json
        - name: backend-config
          mountPath: /app/env/backend.json
          subPath: backend.json
        env:
          - name: CONFIG_HASH
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['configHash']
          - name: KEYCLOAK_HOST
            value: "{{ .Values.keycloak.hostname }}"
          - name: MONGO_URI
            value: "{{ required "You must specify a mongo hostname" .Values.backend.mongoUri }}"
          - name: KEYCLOAK_REALM
            value: "{{ .Values.keycloak.realmName | default "workbench-dev" }}"
          - name: KEYCLOAK_CLIENT_ID
            value: "{{ .Values.keycloak.clientId | default "workbench-local" }}"
          - name: KEYCLOAK_CLIENT_SECRET
            value: "{{ .Values.keycloak.clientSecret }}"
          - name: INSECURE_SSL_VERIFY
            value: "{{ .Values.backend.insecure_ssl_verify | default true }}"

        readinessProbe:
          httpGet:
            path: /api/v1/version
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 120
#        livenessProbe:
#          failureThreshold: 3
#          httpGet:
#            path: /api/v1/version
#            port: 5000
#            scheme: HTTP
#          initialDelaySeconds: 5
#          periodSeconds: 5
#          successThreshold: 1
#          timeoutSeconds: 1
        ports:
        - containerPort: 5000
          name: api

      volumes:
       - name: frontend-config
         configMap:
           name: {{ .Release.Name }}
           items:
            - key: frontend.json
              path: frontend.json
       - name: backend-config
         configMap:
           name: {{ .Release.Name }}
           items:
            - key: backend.json
              path: backend.json
