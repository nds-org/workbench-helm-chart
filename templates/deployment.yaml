apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: ["", "extensions", "apps", "batch", "policy", "rbac.authorization.k8s.io", "networking.k8s.io"]
  resources: ["componentstatuses", "persistentvolumeclaims", "replicasets", "deployments", "events", "endpoints", "pods", "pods/log", "pods/exec", "namespaces", "services", "replicationcontrollers", "secrets", "resourcequotas", "limitranges", "networkpolicies"]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["ndslabs-config"]
  verbs: ["get", "update"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "update", "patch", "create", "delete"]
#- nonResourceURLs: ["*"]
#  verbs: ["*"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ .Release.Name }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
    component: {{ .Release.Name }}
spec:
  selector:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
  ports:
    - port: 80
      name: webui
      protocol: TCP
    - port: 5000
      name: api
      protocol: TCP
{{- if .Values.backend.storage.db.persistent.type | default false }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-db
  labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  storageClassName: ""
  capacity:
    storage: {{ .Values.backend.storage.db.size | quote }}
  accessModes:
    - {{ .Values.backend.storage.db.access_mode | quote }}
  {{- if eq .Values.backend.storage.db.persistent.type "aws" | default nil }}
  awsElasticBlockStore:
    volumeID: {{ .Values.backend.storage.db.persistent.volume_id | quote }}
  {{- else if eq .Values.backend.storage.db.persistent.type "gce" | default nil }}
  gcePersistentDisk:
    pdName: {{ .Values.backend.storage.db.persistent.volume_id | quote }}
  {{- end }}
    fsType: ext4
  claimRef:
    namespace: {{ .Release.Namespace }}
    name: {{ .Release.Name }}-db
{{- end }}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-db
  namespace: {{ .Release.Namespace }}
  annotations:
  {{- if .Values.backend.storage.db.storage_class }}
    volume.beta.kubernetes.io/storage-class: {{ .Values.backend.storage.db.storage_class | quote }}
  {{- end }}
  labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  {{- if .Values.backend.storage.db.persistent.type | default false }}
  storageClassName: ""
  volumeName: {{ .Release.Name }}-db
  {{- end }}
  accessModes:
    - {{ .Values.backend.storage.db.access_mode | default "ReadWriteOnce" }}
  resources:
    requests:
      storage: {{ .Values.backend.storage.db.size | quote }}
---
apiVersion: apps/v1
kind: {{ .Values.controller.kind | default "Deployment" }}
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: 1
  strategy:
    type: {{ .Values.controller.strategy_type | default "RollingUpdate" }}
  selector:
    matchLabels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 6 }}
{{- end }}
  template:
    metadata:
      labels:
{{- with .Values.backend.labels | default "app: workbench" }}
{{ toYaml . | indent 8 }}
{{- end }}
      annotations:
        configHash: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
      - name: webui
        image: {{ required "Must specify an image for controller.images.webui" .Values.controller.images.webui }}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: webui
        volumeMounts:
        - name: frontend-config
          mountPath: /usr/share/nginx/html/frontend.json
          subPath: frontend.json
        - name: backend-config
          mountPath: /usr/share/nginx/html/backend.json
          subPath: backend.json

      - name: apiserver
        image: {{ required "Must specify an image for controller.images.apiserver" .Values.controller.images.apiserver }}
        imagePullPolicy: Always
        volumeMounts:
        - name: backend-config
          mountPath: /app/env/backend.json
          subPath: backend.json
        env:
          - name: CONFIG_HASH
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['configHash']
        readinessProbe:
          httpGet:
            path: /api/v1/version
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 120
#        livenessProbe:
#          failureThreshold: 3
#          httpGet:
#            path: /api/v1/version
#            port: 5000
#            scheme: HTTP
#          initialDelaySeconds: 5
#          periodSeconds: 5
#          successThreshold: 1
#          timeoutSeconds: 1
        ports:
        - containerPort: 5000
          name: api

      - name: db
        image: {{ required "Must specify an image for controller.images.db" .Values.controller.images.db }}
        ports:
        - containerPort: 27017
          name: db
        volumeMounts: 
        - name: datadb
          mountPath: /data/db
      volumes:
       - persistentVolumeClaim:
            claimName: {{ .Release.Name }}-db
         name: datadb
       - name: frontend-config
         configMap:
           name: {{ .Release.Name }}
           items:
            - key: frontend.json
              path: frontend.json
       - name: backend-config
         configMap:
           name: {{ .Release.Name }}
           items:
            - key: backend.json
              path: backend.json
