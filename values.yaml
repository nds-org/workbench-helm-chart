# Default values for workbench.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# V2
frontend:
  support_email: ""
  analytics_tracking_id: ""
  signin_url: "https://kubernetes.docker.internal/oauth2/start?rd=https%3A%2F%2Fkubernetes.docker.internal%2F"
  customization:
    product_name: "Workbench"
    landing_html: "<span style='font-size:20pt;'><p>Labs Workbench is an environment where developers can prototype tools and capabilities</p><p>that help build out the NDS framework and services. In particular, it is a place that can</p><p>host the development activities of <a style='text-decoration:none;' href='http://www.nationaldataservice.org/projects/pilots.html'>NDS pilot projects</a></p></span>"
    favicon_path: "/favicon.svg"
    brand_logo_path: "/favicon.svg"
    learn_more_url: "http://www.nationaldataservice.org/platform/workbench.html"
    help_links:
      - icon: "fa-info-circle"
        name: "Feature Overview"
        url: https://nationaldataservice.atlassian.net/wiki/display/NDSC/Feature+Overview"
      - icon: "fa-question-circle"
        name: "FAQ"
        url: "https://nationaldataservice.atlassian.net/wiki/display/NDSC/Frequently+Asked+Questions"
      - icon: "fa-book"
        name: "User's Guide"
        url: "https://nationaldataservice.atlassian.net/wiki/display/NDSC/User%27s+Guide"
      - icon: "fa-code-fork"
        name: "Developer's Guide"
        url: "https://nationaldataservice.atlassian.net/wiki/display/NDSC/Developer%27s+Guide"
      - icon: "fa-gavel"
        name: "Acceptable Use Policy"
        url: "https://nationaldataservice.atlassian.net/wiki/display/NDSC/Acceptable+Use+Policy"

backend:
  mongoUri: "mongodb://workbench-mongodb.workbench.svc.cluster.local:27017/ndslabs"
  domain: "kubernetes.docker.internal"
  insecure_ssl_verify: "false"   # default: true
  labels:
    manager: workbench
  timeout: 30
  inactivity_timeout: 480
  specs:
    repo: "https://github.com/nds-org/ndslabs-specs.git"
    branch: master
  storage:
    home:
      storage_class: "nfs"
      claim_suffix: "-home"
    shared:
      enabled: false
      volume_path: "/tmp/shared"
      storage_class: "nfs"
      read_only: true

# Enable this to run an NGINX ingress controller (if you aren't running another ingress controller)
ingress-nginx:
  enabled: true
  controller:
    # If you have an existing TLS secret, you can uncomment this to specify it here
    # Otherwise NGINX will generate a self-signed and use that instead
    #extraArgs:
    #  default-ssl-certificate: workbench/ndslabs-tls
    hostPort:
      enabled: true
    kind: Deployment

# Enable this to use an external NFS server to provision user volumes (e.g. nfs-condo)
nfs-client-provisioner:
  enabled: false   # WARNING: experimental
  nfs:
    server: "workbench-nfs-server-provisioner.workbench.svc.cluster.local"
    path: "/export"
    mountOptions:
    - tcp
    - nfsvers=3
    
# Enable this to run a local NFS server (development only)      
nfs-server-provisioner:
  enabled: true
  persistence:
    enabled: true
    storageClass: "hostpath"

# Enable this to run a local Keycloak instance (development only)
keycloak:
  enabled: true   # WARNING: experimental
  hostname: "https://kubernetes.docker.internal/auth"
  realmName: "workbench-dev"
  clientId: "workbench-local"
  clientSecret: ""
  httpRelativePath: "/auth/"
  auth:
    adminUser: "admin"
    adminPassword: "workbench"
  proxyAddressForwarding: true
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "-Dkeycloak.import=/config/realm.json"
  extraVolumeMounts:
    - name: config
      mountPath: "/config"
      readOnly: true
  extraVolumes:
    - name: config
      configMap:
        name: keycloak-realm
        items:
        - key: "realm.json"
          path: "realm.json"
  global:
    storageClass: "hostpath"
    postgresql:
      auth:
        postgresPassword: workbench
        password: workbench
  postgresql:
    enabled: true
  service:
    type: ClusterIP
  ingress:
    enabled: true
    className: nginx
    hostname: "kubernetes.docker.internal"
    tls: true
    path: /auth/
    annotations:
      kubernetes.io/ingress.class: nginx

      # without this, signups (and other large proxy bodies) will fail with a 502
      nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    extraTls:
      - hosts:
        - kubernetes.docker.internal


oauth2-proxy:
  enabled: true
  # To enable session storage backed by redis:
  #sessionStorage:
  #  type: redis
  #redis:
  #  enabled: true
  #hostAlias:
  #  enabled: true
  #  ip: "10.105.112.195"
  #  hostname: "keycloak.local.ndslabs.org"
  #extraEnv:
  #  - name: OAUTH2_PROXY_COOKIE_DOMAINS
  #    value: ".docker.internal"
  extraArgs:
    # Keycloak OIDC config:
    provider: keycloak-oidc
    provider-display-name: Workbench Login
    redirect-url: "https://kubernetes.docker.internal/oauth2/callback"
    oidc-issuer-url: "https://kubernetes.docker.internal/auth/realms/workbench-dev"
    client-id: "workbench-local"

    # Authorization config:
    #email-domain: "*"
    #whitelist-domain: "*"
    #scope: email profile
    #allowed-group: "/workbench"

    # Local Development Only:
    insecure-oidc-skip-issuer-verification: true
    insecure-oidc-allow-unverified-email: true
    ssl-insecure-skip-verify: true
    ssl-upstream-insecure-skip-verify: true
    force-json-errors: true
  ingress:
    enabled: true
    className: nginx
    path: /oauth2/
    hosts:
      - kubernetes.docker.internal
    tls:
    #  - secretName: ndslabs-tls
      - hosts:
          - kubernetes.docker.internal
    #      - local.ndslabs.org
    #      - '*.local.ndslabs.org'
  

mongodb:
  enabled: true
  #useStatefulSet: true
  architecture: standalone   # WARNING: experimental
  auth:
    replicaSetKey: "workbenchauthtoken12345"
  replicaCount: 3
  persistent:
    # Values can be "false" for no persistent storage, "aws" for awsElasticBlockStore,
    # or "gce" for gcePersistentDisk
    type: false
    # If using awsElasticBlockStore enter the EBS volume id, if using gcePersistentDisk
    # enter the persistent disk name
    volume_id:
  storage_class: "hostpath"
  access_mode: "ReadWriteOnce"   # default: ReadWriteOnce
  size: "1Gi"


controller:
  # kind: Deployment   # default: Deployment
  images:
    webui: "ndslabs/webui:react"
    apiserver: "ndslabs/apiserver:python"
  # strategy_type: "Recreate"  # default: RollingUpdate
  auth:
    rootPassword: "workbench"
  #hostAliases:
  #- ip: "10.105.112.195"
  #  hostnames:
  #  - "keycloak.local.ndslabs.org"

ingress:
  class: "nginx"
  tls:
    - hosts:
      - "kubernetes.docker.internal"
  #    - "*.local.ndslabs.org"
  #    - "local.ndslabs.org"
  #    secretName: "ndslabs-tls"
  api:
    annotations:
      #cert-manager.io/issuer: "selfsigned"
      kubernetes.io/ingress.class: "nginx"
      ingress.kubernetes.io/app-root: "/"
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/force-ssl-redirect: "true"
  webui:
    annotations:
      kubernetes.io/ingress.class: "nginx"
      ingress.kubernetes.io/app-root: "/"
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/force-ssl-redirect: "true"
      #nginx.ingress.kubernetes.io/auth-url: "https://kubernetes.docker.internal/oauth2/auth"
      #nginx.ingress.kubernetes.io/auth-signin: "https://kubernetes.docker.internal/oauth2/start?rd=https%3A%2F%2Fkubernetes.docker.internal%2F"
      #nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email"

      
  
  userapps:
    annotations:
      kubernetes.io/ingress.class: "nginx"
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/signin-url: "https://kubernetes.docker.internal/oauth2/start?rd=https%3A%2F%2Fkubernetes.docker.internal%2F"
      nginx.ingress.kubernetes.io/auth-url: "https://kubernetes.docker.internal/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email, x-auth-request-access-token, x-auth-request-redirect, x-auth-request-preferred-username"
  



#### TODO:

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


